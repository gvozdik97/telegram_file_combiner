import os
import logging
import asyncio
import threading
from pathlib import Path
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

import config
from archive_processor import ArchiveProcessor
from file_combiner import process_directory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FileCombinerBot:
    def __init__(self, application):
        self.processor = ArchiveProcessor()
        self.processing_users = set()
        self.application = application
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ **Python File Combiner Bot**

–Ø –ø–æ–º–æ–≥—É –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤–∞—à–∏ Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ!

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –°–æ–∑–¥–∞–π—Ç–µ ZIP –∏–ª–∏ RAR –∞—Ä—Ö–∏–≤ —Å –≤–∞—à–∏–º Python –ø—Ä–æ–µ–∫—Ç–æ–º
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –º–Ω–µ
3. –Ø –æ–±—ä–µ–¥–∏–Ω—é –≤—Å–µ .py —Ñ–∞–π–ª—ã –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ –∏ —É–¥–∞–ª—é –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
4. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:** ZIP, RAR
**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:** 50MB

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—Ä—Ö–∏–≤ –∏ —è –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç—É!
        """
        await update.message.reply_text(welcome_text)
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        user_id = update.message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id in self.processing_users:
            await update.message.reply_text("‚è≥ –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            return
        
        document = update.message.document
        file_name = document.file_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if not self.processor.is_supported_format(file_name):
            await update.message.reply_text(
                "‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ:\n"
                "‚úÖ ZIP –∞—Ä—Ö–∏–≤—ã (.zip)\n"
                "‚úÖ RAR –∞—Ä—Ö–∏–≤—ã (.rar)"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if document.file_size > config.MAX_FILE_SIZE:
            await update.message.reply_text(
                f"‚ùå **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!**\n\n"
                f"–†–∞–∑–º–µ—Ä: {document.file_size // 1024 // 1024}MB\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {config.MAX_FILE_SIZE // 1024 // 1024}MB"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
        self.processing_users.add(user_id)
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await update.message.reply_text(f"üì• **–ü—Ä–∏–Ω—è–ª –∞—Ä—Ö–∏–≤:** `{file_name}`\nüîÑ **–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...**")
            
            file = await context.bot.get_file(document.file_id)
            temp_archive_path = Path(config.UPLOADS_DIR) / f"{user_id}_{file_name}"
            
            await file.download_to_drive(custom_path=temp_archive_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            result_path, message = await self._process_archive(update, context, temp_archive_path, user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result_path and Path(result_path).exists():
                with open(result_path, 'rb') as result_file:
                    await update.message.reply_document(
                        document=result_file,
                        filename=f"processed_project_{user_id}.zip",
                        caption=message
                    )
                # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                self.processor.cleanup(result_path)
            else:
                await update.message.reply_text(message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            await update.message.reply_text(f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!**\n\n–û—à–∏–±–∫–∞: `{str(e)}`")
        finally:
            self.processing_users.discard(user_id)
    
    async def _process_archive(self, update: Update, context: ContextTypes.DEFAULT_TYPE, archive_path, user_id):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            result = await asyncio.to_thread(
                self._process_archive_sync, archive_path, user_id
            )
            return result
        except Exception as e:
            # –û—á–∏—â–∞–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.processor.cleanup(
                archive_path,
                Path(config.PROCESSING_DIR) / str(user_id),
                Path(config.RESULTS_DIR) / f"{user_id}_processed.zip"
            )
            raise e
    
    def _process_archive_sync(self, archive_path, user_id):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
        extract_path = Path(config.PROCESSING_DIR) / str(user_id)
        result_path = Path(config.RESULTS_DIR) / f"{user_id}_processed.zip"
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        if not self.processor.extract_archive(archive_path, extract_path):
            return None, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞"
        
        # –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
        project_folder = self.processor.find_main_folder(extract_path)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        success, folders_processed, files_processed = process_directory(
            project_folder,
            exclude_folders=config.DEFAULT_EXCLUDE_FOLDERS,
            exclude_files=config.DEFAULT_EXCLUDE_FILES,
            remove_original=True
        )
        
        if not success:
            return None, "‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"
        
        if folders_processed == 0:
            return None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ —Å Python —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è"
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.processor.create_zip_result(project_folder, result_path)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.processor.cleanup(archive_path, extract_path)
        
        message = (
            f"‚úÖ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫: {folders_processed}\n"
            f"üìÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_processed}\n"
            f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!"
        )
        
        return result_path, message
    
    async def cleanup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞)"""
        user_id = update.message.from_user.id
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        if user_id != 1344187204: 
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            cleaned_files = 0
            cleaned_dirs = 0
            
            for temp_dir in [config.UPLOADS_DIR, config.PROCESSING_DIR, config.RESULTS_DIR]:
                temp_path = Path(temp_dir)
                if temp_path.exists():
                    for item in temp_path.iterdir():
                        if item.is_file():
                            item.unlink()
                            cleaned_files += 1
                        elif item.is_dir():
                            # –£–¥–∞–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                            for subitem in item.rglob('*'):
                                if subitem.is_file():
                                    subitem.unlink()
                                    cleaned_files += 1
                            item.rmdir()
                            cleaned_dirs += 1
            
            await update.message.reply_text(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_files}\nüìÅ –£–¥–∞–ª–µ–Ω–æ –ø–∞–ø–æ–∫: {cleaned_dirs}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        status_text = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(self.processing_users)}
üíæ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
  - üìÅ Uploads: {len(list(Path(config.UPLOADS_DIR).iterdir()))} —Ñ–∞–π–ª–æ–≤
  - üìÅ Processing: {len(list(Path(config.PROCESSING_DIR).iterdir()))} –ø–∞–ø–æ–∫
  - üìÅ Results: {len(list(Path(config.RESULTS_DIR).iterdir()))} —Ñ–∞–π–ª–æ–≤

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ! ‚úÖ
        """
        await update.message.reply_text(status_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config.BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É application
    bot = FileCombinerBot(application)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("cleanup", bot.cleanup))
    application.add_handler(CommandHandler("status", bot.status))
    application.add_handler(MessageHandler(filters.Document.ALL, bot.handle_document))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()